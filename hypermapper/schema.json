{
  "additionalProperties": false,
  "description": "Hypermapper parameters used to set up a Hypermapper before running",
  "doe_sampling": {
    "doe": {
      "additionalProperties": false,
      "properties": {
        "doe_type": {
          "default": "random sampling",
          "enum": [
            "random sampling",
            "embedding random sampling"
          ],
          "type": "string"
        },
        "number_of_samples": {
          "default": 10,
          "description": "The number of samples during the design of experiment phase.",
          "type": "integer"
        },
        "allow_repetitions": {
          "default": false,
          "description": "Whether to allow DoE to sample repeated configurations.",
          "type": "boolean"
        }
      }
    }
  },
  "feasible_output": {
    "feasible": {
      "additionalProperties": false,
      "properties": {
        "enable_feasible_predictor": {
          "default": false,
          "description": "Enables a classifier (the predictor) that will predict which samples of the space are feasible (i.e. valid) samples. This in turn helps to focus the search on areas that are feasible optimizing the number of samples that are actually run. This field has a negative impact on the speed of Hypermapper but a positive impact on the final Pareto result.",
          "type": "boolean"
        },
        "false_value": {
          "default": "false",
          "description": "The value that indicates that the sample is non valid. Example 1: false. Example 2: 0. Example 3: False."
        },
        "feasibility_threshold": {
          "default": 0.1,
          "description": "Minimum required probability of feasibility.",
          "type": "number"
        },
        "name": {
          "default": "Valid",
          "description": "Name of the validity bit. Example: 'Valid'.",
          "type": "string"
        },
        "true_value": {
          "default": "true",
          "description": "The value that indicates that the sample is valid. Example 1: true. Example 2: 1. Example 3: True."
        }
      }
    }
  },
  "hypermapper_modes": {
    "client-server": {
      "additionalProperties": false,
      "properties": {
        "mode": {
          "enum": [
            "client-server"
          ]
        }
      },
      "required": [
        "mode"
      ]
    },
    "default": {
      "additionalProperties": false,
      "properties": {
        "mode": {
          "enum": [
            "default"
          ]
        }
      },
      "required": [
        "mode"
      ]
    },
    "exhaustive": {
      "additionalProperties": false,
      "properties": {
        "exhaustive_search_file": {
          "description": "File containing the exhaustive search. For interesting problems this is usually not available because the space is usually too big. Example: exhaustive_search_file.csv",
          "type": "string"
        },
        "mode": {
          "enum": [
            "exhaustive"
          ]
        }
      },
      "required": [
        "mode",
        "exhaustive_search_file"
      ]
    }
  },
  "models": {
    "gaussianProcess": {
      "properties": {
        "model": {
          "enum": [
            "gaussian_process"
          ]
        }
      },
      "required": [
        "model"
      ]
    },
    "randomForest": {
      "properties": {
        "bootstrap": {
          "default": true,
          "description": "Whether to use bagging when fitting the forest.",
          "type": "boolean"
        },
        "max_features": {
          "default": 0.5,
          "description": "Percentage of the features to be used when fitting the forest.",
          "maximum": 1,
          "minimum": 0,
          "type": "number"
        },
        "min_samples_split": {
          "default": 2,
          "description": "Minimum number of samples required to split a node.",
          "minimum": 2,
          "type": "integer"
        },
        "model": {
          "enum": [
            "random_forest"
          ]
        },
        "number_of_trees": {
          "default": 200,
          "description": "Number of trees in the forest.",
          "maximum": 1000,
          "minimum": 1,
          "type": "integer"
        },
        "use_all_data_to_fit_mean": {
          "default": false,
          "description": "Whether to still use all data to fit the mean of the leaves when bootstrapping in Random Forests.",
          "type": "boolean"
        },
        "use_all_data_to_fit_variance": {
          "default": false,
          "description": "Whether to still use all data to fit the variance of the leaves when bootstrapping in Random Forests.",
          "type": "boolean"
        }
      },
      "required": [
        "model"
      ]
    }
  },
  "properties": {
    "acquisition_function": {
      "default": "EI",
      "description": "which acquisition function to be used: EI or UCB.",
      "enum": [
        "UCB",
        "EI",
        "EI_BOPRO",
        "EI_PIBO"
      ],
      "type": "string"
    },
    "acquisition_function_optimizer": {
      "default": "local_search",
      "description": "which method to use to optimize the acquisition function.",
      "enum": [
        "local_search"
      ],
      "type": "string"
    },
    "allow_duplicate_samples": {
      "default": true,
      "description": "Whether to allow the BO to choose a single point multiple times",
      "type": "boolean"
    },
    "application_name": {
      "default": "application",
      "description": "Name of the application, this is for printing and file naming purposes.",
      "type": "string"
    },
    "design_of_experiment": {
      "$ref": "#/doe_sampling/doe",
      "default": {
        "doe_type": "random sampling",
        "number_of_samples": 10
      },
      "description": "Before starting the active learning phase, Hypermapper samples the space: the design of experiment (doe) phase. How many times it samples the space and how is declared here. The doe sampling methods are: random sampling, embedded random sampling.",
      "type": "object"
    },
    "epsilon_greedy_threshold": {
      "default": 0,
      "description": "value for the epsilon in the epsilon greedy component of Hypermapper.",
      "maximum": 1,
      "minimum": 0,
      "type": "number"
    },
    "evolution_crossover": {
      "default": false,
      "description": "whether to use crossover.",
      "type": "boolean"
    },
    "evolution_generations": {
      "default": 150,
      "description": "number of iterations through the evolutionary loop.",
      "type": "integer"
    },
    "evolution_population_size": {
      "default": 50,
      "description": "number of points the Evolutionary Algorithm keeps track of.",
      "type": "integer"
    },
    "exploration_augmentation": {
      "default": 0.0001,
      "description": "subtracted from the best objective value in EI",
      "type": "number"
    },
    "feasible_output": {
      "$ref": "#/feasible_output/feasible",
      "default": {
        "false_value": "False",
        "name": "Valid",
        "true_value": "True"
      },
      "description": "This the feasible/non feasible output flag, which is the validity or feasibility bit (true, false) of one sample of the space. This is an output of the code being optimized.",
      "type": "object"
    },
    "hypermapper_mode": {
      "default": {
        "mode": "default"
      },
      "description": "One of the ways of using Hypermapper: default, exhaustive and client-server.",
      "oneOf": [
        {
          "$ref": "#/hypermapper_modes/default"
        },
        {
          "$ref": "#/hypermapper_modes/exhaustive"
        },
        {
          "$ref": "#/hypermapper_modes/client-server"
        }
      ],
      "type": "object"
    },
    "input_parameters": {
      "additionalProperties": false,
      "description": "The input variables that define the search space to explore.",
      "minProperties": 1,
      "patternProperties": {
        "^[0-9a-zA-Z_-]+$": {
          "additionalProperties": false,
          "properties": {
            "constraints": {
              "description": "constraints as evaluable string",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "dependencies": {
              "description": "dependencies of constraints of tp",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "parameter_default": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "array"
                }
              ]
            },
            "parameter_type": {
              "description": "The type of the parameter that is being defined.",
              "enum": [
                "ordinal",
                "categorical",
                "real",
                "integer",
                "permutation"
              ],
              "type": "string"
            },
            "parametrization": {
              "description": "Parametrization for Permutation variables.",
              "type": "string"
            },
            "prior": {
              "default": "uniform",
              "oneOf": [
                {
                  "enum": [
                    "gaussian",
                    "uniform",
                    "exponential",
                    "decay",
                    "estimate",
                    "custom_gaussian"
                  ],
                  "type": "string"
                },
                {
                  "type": "array"
                }
              ]
            },
            "prior_parameters": {
              "default": [],
              "description": "Parameters for the prior distribution: mean and std",
              "type": "array"
            },
            "transform": {
              "description": "Transformations for variables.",
              "enum": [
                "none",
                "log"
              ],
              "type": "string"
            },
            "values": {
              "description": "The values of this parameter. For real parameters it requires a min and a max. For integer a min and max. For ordinals a list of numbers. For categoricals a list of strings. For permutations, the number of elements.",
              "items": {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "number"
                  }
                ]
              },
              "type": "array"
            }
          },
          "required": [
            "parameter_type",
            "values"
          ]
        }
      },
      "type": "object"
    },
    "lengthscale_prior": {
      "default": {
        "name": "none"
      },
      "description": "Which prior to use for the GP lengthscale. Only activated if 'normalize_inputs' = true. ",
      "properties": {
        "name": {
          "default": [
            "gamma"
          ],
          "enum": [
            "none",
            "gamma",
            "lognormal"
          ],
          "type": "string"
        },
        "parameters": {
          "items": {
            "type": "number"
          },
          "type": "array",
          "default": [1.3, 0.1]
        }
      },
      "type": "object"
    },
    "local_search_from_best": {
      "default": true,
      "description": "whether to include best value in local search",
      "type": "boolean"
    },
    "local_search_improvement_threshold": {
      "default": 0,
      "description": "the maximum number of function evaluations the local search can perform. If -1, the number of function evaluations will not be limited.",
      "min": 0,
      "type": "number"
    },
    "local_search_random_points": {
      "default": 30000,
      "description": "number of random points for the multi-start local search used to optimize the acquisition functions.",
      "type": "integer"
    },
    "local_search_starting_points": {
      "default": 10,
      "description": "number of starting points for the multi-start local search used to optimize the acquisition functions.",
      "type": "integer"
    },
    "local_search_step_size": {
      "default": 0.03,
      "description": "Standard deviation when selecting new points in the local search for continuous values.",
      "type": "number"
    },
    "log_acq_value": {
      "default": false,
      "description": "whether to log transfor acq val",
      "type": "boolean"
    },
    "log_file": {
      "default": "hypermapper_logfile.log",
      "description": "Change the name of the log file to this name. Log files are very handy in client-server mode where the prints are not displayed.",
      "type": "string"
    },
    "log_transform_output": {
      "default": false,
      "description": "whether to logtransform outputs before fitting model.",
      "type": "boolean"
    },
    "model_good_quantile": {
      "default": 0.05,
      "description": "defines the quantile of points the probabilistic model will consider 'good'.",
      "type": "number"
    },
    "model_weight": {
      "default": 10,
      "description": "weight given to the probabilistic model versus the prior in Hypermapper's posterior computation. Larger values give more emphasis to the prior.",
      "type": "number"
    },
    "models": {
      "default": {
        "model": "gaussian_process"
      },
      "description": "Hypermapper currently supports Random Forests and Gaussian Processes",
      "oneOf": [
        {
          "$ref": "#/models/randomForest"
        },
        {
          "$ref": "#/models/gaussianProcess"
        }
      ],
      "type": "object"
    },
    "multistart_hyperparameter_optimization": {
      "default": false,
      "description": "Whether to start GP hyperparameter optimisation from different initial starting points. Slower, but yields better models.",
      "type": "boolean"
    },
    "hyperparameter_optimization_iterations": {
      "default": 5,
      "description": "Number of iterations to run MLE for.",
      "type": "integer"
    },
    "GP_model": {
        "default": "botorch",
        "description": "Type of GP model to use. gpy, botorch, gpytorch, botorch_fixed botorch_heteroskedastic are available.",
        "type": "string"
    },
    "mutation_rate": {
      "default": 1,
      "description": "number of parameters to mutate.",
      "type": "integer"
    },
    "naive_cot_rs": {
      "default": false,
      "description": "Whether to use naive rs for cot.",
      "type": "boolean"
    },
    "noise": {
      "default": true,
      "description": "Whether the function is assumed to be noisy or not.",
      "type": "boolean"
    },
    "noise_prior": {
      "default": {
        "name": "none"
      },
      "description": "Which prior to use for the GP outputscale. Only activated if 'normalize_inputs' = true. ",
      "properties": {
        "name": {
          "default": [
            "none"
          ],
          "enum": [
            "none",
            "gamma"
          ],
          "type": "string"
        },
        "parameters": {
          "items": {
            "type": "number"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "normalize_inputs": {
      "default": true,
      "description": "whether to normalize inputs to be in [0-1]^D",
      "type": "boolean"
    },
    "number_of_repetitions": {
      "default": 1,
      "description": "Usually a number between 1 and 5. Number of times Hypermapper runs a single sample of the search space. For statistical significance it may be useful to run a sample several time. The mean or the median of the multiple runs is taken by Hypermapper. Execution time is negatively affected from a high number of repetitions.",
      "minimum": 1,
      "type": "integer"
    },
    "objective_value_target": {
      "default": -9999,
      "description": "Set a target for the EI acq.",
      "type": "number"
    },
    "optimization_iterations": {
      "default": 50,
      "description": "Usually a number between 1 and 10. Max number of optimization iterations that Hypermapper can internally perform. We set a max number to limit the execution time of Hypermapper. Usually a bigger number will give a better accuracy but slower results.",
      "maximum": 5000,
      "minimum": 0,
      "type": "integer"
    },
    "optimization_method": {
      "default": "bayesian_optimization",
      "description": "Method to use for the optimization in Hypermapper.",
      "enum": [
        "bayesian_optimization",
        "evolutionary_optimization",
        "exhaustive"
      ],
      "type": "string"
    },
    "optimization_objectives": {
      "description": "The names of the objectives Hypermapper will optimize. Hypermapper will automatically infer if this application is a mono or multi-objective optimization problem.",
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "output_data_file": {
      "default": "output_samples.csv",
      "description": "Output file containing all the points explored by Hypermapper.",
      "type": "string"
    },
    "outputscale_prior": {
      "default": {
        "name": "none"
      },
      "description": "Which prior to use for the GP outputscale. Only activated if 'normalize_inputs' = true. ",
      "properties": {
        "name": {
          "default": [
            "none"
          ],
          "enum": [
            "none",
            "gamma"
          ],
          "type": "string"
        },
        "parameters": {
          "items": {
            "type": "number"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "predict_noiseless": {
      "default": true,
      "description": "To predict using GP without noise",
      "type": "boolean"
    },
    "print_posterior_best": {
      "default": false,
      "description": "Whether to print out the best point according to Hypermapper's posterior model's mean after optimization. The best point is computed using Hypermapper's local search.",
      "type": "boolean"
    },
    "prior_estimation_file": {
      "default": "samples.csv",
      "description": "a csv file containing a set of points to be used for density estimation.",
      "type": "string"
    },
    "prior_estimation_quantile": {
      "default": 0.1,
      "description": "quantile of the best points to be used as 'good points' when estimating the prior",
      "type": "number"
    },
    "prior_floor": {
      "default": 1e-6,
      "description": "the minimum used for normalization in the acquisition function of prior-guided optimization.",
      "type": "number"
    },
    "prior_limit_estimation_points": {
      "default": 10000,
      "description": "number of random points to estimate the prior limits. The prior limits will be used to normalize the prior during optimization. The limits are updated as new prior values are found, but a initial estimation of the limits prevents the local search from using widely incorrect values in the first iteration.",
      "type": "integer"
    },
    "regularize_evolution": {
      "default": false,
      "description": "whether to regularize (remove the oldest) the evolution.",
      "type": "boolean"
    },
    "reoptimise_hyperparameters_interval": {
      "default": 1,
      "description": "Defines how often to reoptimise the GP hyperparameters.",
      "type": "integer"
    },
    "resume_optimization": {
      "default": false,
      "description": "whether to resume optimization from a previous state or start a new optimization.",
      "type": "boolean"
    },
    "resume_optimization_file": {
      "default": "output_samples.csv",
      "description": "csv data of a previous optimization run to use to resume optimization.",
      "type": "string"
    },
    "reuse_gp_hyperparameters": {
      "default": false,
      "description": "Whether to store hyperparameters between iterations. Should yield average better likelihood but less exploration.",
      "type": "boolean"
    },
    "run_directory": {
      "default": ".",
      "description": "Relative path from where Hypermapper is launched. The result files will be saved here.",
      "type": "string"
    },
    "standardize_objectives": {
      "default": true,
      "description": "whether to standardize objectives to have zero mean and unit variance before fitting model.",
      "type": "boolean"
    },
    "time_budget": {
      "default": -1,
      "description": "Max number of minutes that Hypermapper is allowed to run for. If -1, the runtime will not be limited.",
      "minimum": -1,
      "type": "number"
    },
    "timestamp": {
      "default": "Timestamp",
      "description": "Name of timestamp variable, this is a float that represents seconds from the linux epoch. This is useful to track the progress of the new samples over time and for comparison with other approaches than Hypermapper.",
      "type": "string"
    },
    "use_STGP": {
      "default": true,
      "description": "whether to use a botorch SingleTaskGP.",
      "type": "boolean"
    }
  },
  "required": [
    "optimization_objectives"
  ],
  "title": "Parameters",
  "type": "object"
}